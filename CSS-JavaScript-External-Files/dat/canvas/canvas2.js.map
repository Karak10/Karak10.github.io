{"version":3,"sources":["../../node_modules/@chriscourses/perlin-noise/index.js","canvas2.js"],"names":["PERLIN_YWRAPB","PERLIN_YWRAP","PERLIN_ZWRAPB","PERLIN_ZWRAP","PERLIN_SIZE","perlin_octaves","perlin_amp_falloff","scaled_cosine","i","Math","cos","PI","perlin","noise","x","y","z","Array","random","xi","rxf","ryf","n1","n2","n3","floor","yi","zi","xf","yf","zf","r","ampl","o","of","noiseDetail","lod","falloff","noiseSeed","seed","lcg","m","setSeed","val","getSeed","rand","require","document","querySelector","canvas","c","getContext","width","height","ball","cl","fillStyle","beginPath","arc","stroke","fill","increment","draw","particle1","isScrolledIntoView","el","rect","getBoundingClientRect","elemTop","top","elemBottom","bottom","isVisible","window","innerHeight","animate","clearRect","update","requestAnimationFrame","offset","particles","int","push","forEach","particle","cl2","innerColor","outerColor","previousCoords","lineCap","lineJoin","strokeStyle","lineWidth","moveTo","lineTo","undefined","particles2","colors","length","imageData","getImageData","data","putImageData"],"mappings":"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","file":"canvas2.js","sourceRoot":"..","sourcesContent":["//////////////////////////////////////////////////////////////\n\n// http://mrl.nyu.edu/~perlin/noise/\n// Adapting from PApplet.java\n// which was adapted from toxi\n// which was adapted from the german demo group farbrausch\n// as used in their demo \"art\": http://www.farb-rausch.de/fr010src.zip\n\n// someday we might consider using \"improved noise\"\n// http://mrl.nyu.edu/~perlin/paper445.pdf\n// See: https://github.com/shiffman/The-Nature-of-Code-Examples-p5.js/\n//      blob/main/introduction/Noise1D/noise.js\n\n/**\n * @module Math\n * @submodule Noise\n * @for p5\n * @requires core\n */\n\nconst PERLIN_YWRAPB = 4\nconst PERLIN_YWRAP = 1 << PERLIN_YWRAPB\nconst PERLIN_ZWRAPB = 8\nconst PERLIN_ZWRAP = 1 << PERLIN_ZWRAPB\nconst PERLIN_SIZE = 4095\n\nlet perlin_octaves = 4 // default to medium smooth\nlet perlin_amp_falloff = 0.5 // 50% reduction/octave\n\nconst scaled_cosine = (i) => 0.5 * (1.0 - Math.cos(i * Math.PI))\n\nlet perlin // will be initialized lazily by noise() or noiseSeed()\n\n/**\n * Returns the Perlin noise value at specified coordinates. Perlin noise is\n * a random sequence generator producing a more naturally ordered, harmonic\n * succession of numbers compared to the standard <b>random()</b> function.\n * It was invented by Ken Perlin in the 1980s and been used since in\n * graphical applications to produce procedural textures, natural motion,\n * shapes, terrains etc.<br /><br /> The main difference to the\n * <b>random()</b> function is that Perlin noise is defined in an infinite\n * n-dimensional space where each pair of coordinates corresponds to a\n * fixed semi-random value (fixed only for the lifespan of the program; see\n * the <a href=\"#/p5/noiseSeed\">noiseSeed()</a> function). p5.js can compute 1D, 2D and 3D noise,\n * depending on the number of coordinates given. The resulting value will\n * always be between 0.0 and 1.0. The noise value can be animated by moving\n * through the noise space as demonstrated in the example above. The 2nd\n * and 3rd dimension can also be interpreted as time.<br /><br />The actual\n * noise is structured similar to an audio signal, in respect to the\n * function's use of frequencies. Similar to the concept of harmonics in\n * physics, perlin noise is computed over several octaves which are added\n * together for the final result. <br /><br />Another way to adjust the\n * character of the resulting sequence is the scale of the input\n * coordinates. As the function works within an infinite space the value of\n * the coordinates doesn't matter as such, only the distance between\n * successive coordinates does (eg. when using <b>noise()</b> within a\n * loop). As a general rule the smaller the difference between coordinates,\n * the smoother the resulting noise sequence will be. Steps of 0.005-0.03\n * work best for most applications, but this will differ depending on use.\n *\n * @method noise\n * @param  {Number} x   x-coordinate in noise space\n * @param  {Number} [y] y-coordinate in noise space\n * @param  {Number} [z] z-coordinate in noise space\n * @return {Number}     Perlin noise value (between 0 and 1) at specified\n *                      coordinates\n * @example\n * <div>\n * <code>\n * let xoff = 0.0;\n *\n * function draw() {\n *   background(204);\n *   xoff = xoff + 0.01;\n *   let n = noise(xoff) * width;\n *   line(n, 0, n, height);\n * }\n * </code>\n * </div>\n * <div>\n * <code>let noiseScale=0.02;\n *\n * function draw() {\n *   background(0);\n *   for (let x=0; x < width; x++) {\n *     let noiseVal = noise((mouseX+x)*noiseScale, mouseY*noiseScale);\n *     stroke(noiseVal*255);\n *     line(x, mouseY+noiseVal*80, x, height);\n *   }\n * }\n * </code>\n * </div>\n *\n * @alt\n * vertical line moves left to right with updating noise values.\n * horizontal wave pattern effected by mouse x-position & updating noise values.\n */\n\nexport const noise = function(x, y = 0, z = 0) {\n  if (perlin == null) {\n    perlin = new Array(PERLIN_SIZE + 1)\n    for (let i = 0; i < PERLIN_SIZE + 1; i++) {\n      perlin[i] = Math.random()\n    }\n  }\n\n  if (x < 0) {\n    x = -x\n  }\n  if (y < 0) {\n    y = -y\n  }\n  if (z < 0) {\n    z = -z\n  }\n\n  let xi = Math.floor(x),\n    yi = Math.floor(y),\n    zi = Math.floor(z)\n  let xf = x - xi\n  let yf = y - yi\n  let zf = z - zi\n  let rxf, ryf\n\n  let r = 0\n  let ampl = 0.5\n\n  let n1, n2, n3\n\n  for (let o = 0; o < perlin_octaves; o++) {\n    let of = xi + (yi << PERLIN_YWRAPB) + (zi << PERLIN_ZWRAPB)\n\n    rxf = scaled_cosine(xf)\n    ryf = scaled_cosine(yf)\n\n    n1 = perlin[of & PERLIN_SIZE]\n    n1 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n1)\n    n2 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE]\n    n2 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n2)\n    n1 += ryf * (n2 - n1)\n\n    of += PERLIN_ZWRAP\n    n2 = perlin[of & PERLIN_SIZE]\n    n2 += rxf * (perlin[(of + 1) & PERLIN_SIZE] - n2)\n    n3 = perlin[(of + PERLIN_YWRAP) & PERLIN_SIZE]\n    n3 += rxf * (perlin[(of + PERLIN_YWRAP + 1) & PERLIN_SIZE] - n3)\n    n2 += ryf * (n3 - n2)\n\n    n1 += scaled_cosine(zf) * (n2 - n1)\n\n    r += n1 * ampl\n    ampl *= perlin_amp_falloff\n    xi <<= 1\n    xf *= 2\n    yi <<= 1\n    yf *= 2\n    zi <<= 1\n    zf *= 2\n\n    if (xf >= 1.0) {\n      xi++\n      xf--\n    }\n    if (yf >= 1.0) {\n      yi++\n      yf--\n    }\n    if (zf >= 1.0) {\n      zi++\n      zf--\n    }\n  }\n  return r\n}\n\n/**\n *\n * Adjusts the character and level of detail produced by the Perlin noise\n * function. Similar to harmonics in physics, noise is computed over\n * several octaves. Lower octaves contribute more to the output signal and\n * as such define the overall intensity of the noise, whereas higher octaves\n * create finer grained details in the noise sequence.\n *\n * By default, noise is computed over 4 octaves with each octave contributing\n * exactly half than its predecessor, starting at 50% strength for the 1st\n * octave. This falloff amount can be changed by adding an additional function\n * parameter. Eg. a falloff factor of 0.75 means each octave will now have\n * 75% impact (25% less) of the previous lower octave. Any value between\n * 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n * result in greater than 1.0 values returned by <b>noise()</b>.\n *\n * By changing these parameters, the signal created by the <b>noise()</b>\n * function can be adapted to fit very specific needs and characteristics.\n *\n * @method noiseDetail\n * @param {Number} lod number of octaves to be used by the noise\n * @param {Number} falloff falloff factor for each octave\n * @example\n * <div>\n * <code>\n * let noiseVal;\n * let noiseScale = 0.02;\n *\n * function setup() {\n *   createCanvas(100, 100);\n * }\n *\n * function draw() {\n *   background(0);\n *   for (let y = 0; y < height; y++) {\n *     for (let x = 0; x < width / 2; x++) {\n *       noiseDetail(2, 0.2);\n *       noiseVal = noise((mouseX + x) * noiseScale, (mouseY + y) * noiseScale);\n *       stroke(noiseVal * 255);\n *       point(x, y);\n *       noiseDetail(8, 0.65);\n *       noiseVal = noise(\n *         (mouseX + x + width / 2) * noiseScale,\n *         (mouseY + y) * noiseScale\n *       );\n *       stroke(noiseVal * 255);\n *       point(x + width / 2, y);\n *     }\n *   }\n * }\n * </code>\n * </div>\n *\n * @alt\n * 2 vertical grey smokey patterns affected my mouse x-position and noise.\n */\nexport const noiseDetail = function(lod, falloff) {\n  if (lod > 0) {\n    perlin_octaves = lod\n  }\n  if (falloff > 0) {\n    perlin_amp_falloff = falloff\n  }\n}\n\n/**\n * Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n * produces different results each time the program is run. Set the\n * <b>value</b> parameter to a constant to return the same pseudo-random\n * numbers each time the software is run.\n *\n * @method noiseSeed\n * @param {Number} seed   the seed value\n * @example\n * <div>\n * <code>let xoff = 0.0;\n *\n * function setup() {\n *   noiseSeed(99);\n *   stroke(0, 10);\n * }\n *\n * function draw() {\n *   xoff = xoff + .01;\n *   let n = noise(xoff) * width;\n *   line(n, 0, n, height);\n * }\n * </code>\n * </div>\n *\n * @alt\n * vertical grey lines drawing in pattern affected by noise.\n */\nexport const noiseSeed = function(seed) {\n  // Linear Congruential Generator\n  // Variant of a Lehman Generator\n  const lcg = (() => {\n    // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n    // m is basically chosen to be large (as it is the max period)\n    // and for its relationships to a and c\n    const m = 4294967296\n    // a - 1 should be divisible by m's prime factors\n    const a = 1664525\n    // c and m should be co-prime\n    const c = 1013904223\n    let seed, z\n    return {\n      setSeed(val) {\n        // pick a random seed if val is undefined or null\n        // the >>> 0 casts the seed to an unsigned 32-bit integer\n        z = seed = (val == null ? Math.random() * m : val) >>> 0\n      },\n      getSeed() {\n        return seed\n      },\n      rand() {\n        // define the recurrence relationship\n        z = (a * z + c) % m\n        // return a float in [0, 1)\n        // if z = m then z / m = 0 therefore (z % m) / m < 1 always\n        return z / m\n      }\n    }\n  })()\n\n  lcg.setSeed(seed)\n  perlin = new Array(PERLIN_SIZE + 1)\n  for (let i = 0; i < PERLIN_SIZE + 1; i++) {\n    perlin[i] = lcg.rand()\n  }\n}\n","const { noise } = require('@chriscourses/perlin-noise')\r\n\r\ntry{\r\nif(document.querySelector('#canvvaas1') != null){\r\n    let canvas = document.querySelector('#canvvaas1');\r\n    let c = canvas.getContext('2d');\r\n\r\n    canvas.width = 500;\r\n    canvas.height = 300;\r\n\r\n    let ball = class{\r\n        constructor(x, y, r, cl){\r\n            this.x = x;\r\n            this.y = y;\r\n            this.r = r;\r\n            this.cl = cl;\r\n        }\r\n        \r\n        draw(){\r\n            c.fillStyle = this.cl;\r\n            c.beginPath();\r\n            c.arc(this.x, this.y, this.r, 0, 2 * Math.PI);\r\n            c.stroke();\r\n            c.fill();\r\n        }\r\n\r\n        update(){\r\n            this.y = noise(increment) * (canvas.height - 2 * this.r) + this.r;\r\n            this.draw();\r\n        }\r\n    }\r\n\r\n    let particle1 = new ball(canvas.width / 2, canvas.height / 2, 20, 'red');\r\n\r\n    function isScrolledIntoView(el) {\r\n        var rect = el.getBoundingClientRect();\r\n        var elemTop = rect.top;\r\n        var elemBottom = rect.bottom;\r\n        var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);\r\n        return isVisible;\r\n    } \r\n\r\n    let increment = 0;\r\n\r\n    let animate = function(){\r\n        if(isScrolledIntoView(canvas)){\r\n            c.clearRect(0, 0, canvas.width, canvas.height);\r\n            particle1.update();\r\n            increment += 0.01;\r\n        }\r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    animate();\r\n}\r\n} catch {}\r\n\r\ntry{\r\nif(document.querySelector('#canvvaas2') != null){\r\n    let canvas = document.querySelector('#canvvaas2');\r\n    let c = canvas.getContext('2d');\r\n\r\n    canvas.width = 500;\r\n    canvas.height = 300;\r\n\r\n    let ball = class{\r\n        constructor(x, y, r, cl){\r\n            this.x = x;\r\n            this.y = y;\r\n            this.r = r;\r\n            this.cl = cl;\r\n        }\r\n        \r\n        draw(){\r\n            c.fillStyle = this.cl;\r\n            c.beginPath();\r\n            c.arc(this.x, this.y, this.r, 0, 2 * Math.PI);\r\n            c.stroke();\r\n            c.fill();\r\n        }\r\n\r\n        update(){\r\n            this.x = noise(increment) * (canvas.width - 2 * this.r) + this.r;\r\n            this.y = noise(increment) * (canvas.height - 2 * this.r) + this.r;\r\n            this.draw();\r\n        }\r\n    }\r\n\r\n    let particle1 = new ball(canvas.width / 2, canvas.height / 2, 20, 'red');\r\n\r\n    function isScrolledIntoView(el) {\r\n        var rect = el.getBoundingClientRect();\r\n        var elemTop = rect.top;\r\n        var elemBottom = rect.bottom;\r\n        var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);\r\n        return isVisible;\r\n    } \r\n\r\n    let increment = 0;\r\n\r\n    let animate = function(){\r\n        if(isScrolledIntoView(canvas)){\r\n            c.clearRect(0, 0, canvas.width, canvas.height);\r\n            particle1.update();\r\n            increment += 0.01;\r\n        }\r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    animate();\r\n}\r\n} catch {}\r\n\r\ntry{\r\nif(document.querySelector('#canvvaas3') != null){\r\n    let canvas = document.querySelector('#canvvaas3');\r\n    let c = canvas.getContext('2d');\r\n\r\n    canvas.width = 500;\r\n    canvas.height = 300;\r\n\r\n    let ball = class{\r\n        constructor(x, y, r, cl){\r\n            this.x = x;\r\n            this.y = y;\r\n            this.r = r;\r\n            this.cl = cl;\r\n        }\r\n        \r\n        draw(){\r\n            c.fillStyle = this.cl;\r\n            c.beginPath();\r\n            c.arc(this.x, this.y, this.r, 0, 2 * Math.PI);\r\n            c.stroke();\r\n            c.fill();\r\n        }\r\n\r\n        update(){\r\n            this.x = noise(increment - 20) * (canvas.width - 2 * this.r) + this.r;\r\n            this.y = noise(increment) * (canvas.height - 2 * this.r) + this.r;\r\n            this.draw();\r\n        }\r\n    }\r\n\r\n    let particle1 = new ball(canvas.width / 2, canvas.height / 2, 20, 'red');\r\n\r\n    function isScrolledIntoView(el) {\r\n        var rect = el.getBoundingClientRect();\r\n        var elemTop = rect.top;\r\n        var elemBottom = rect.bottom;\r\n        var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);\r\n        return isVisible;\r\n    } \r\n\r\n    let increment = 0;\r\n\r\n    let animate = function(){\r\n        if(isScrolledIntoView(canvas)){\r\n            c.clearRect(0, 0, canvas.width, canvas.height);\r\n            particle1.update();\r\n            increment += 0.01;\r\n        }\r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    animate();\r\n}\r\n} catch {}\r\n\r\ntry{\r\nif(document.querySelector('#canvvaas4') != null){\r\n    let canvas = document.querySelector('#canvvaas4');\r\n    let c = canvas.getContext('2d');\r\n\r\n    canvas.width = 500;\r\n    canvas.height = 300;\r\n\r\n    let ball = class{\r\n        constructor(x, y, r, cl, offset){\r\n            this.x = x;\r\n            this.y = y;\r\n            this.r = r;\r\n            this.cl = cl;\r\n            this.offset = offset;\r\n        }\r\n        \r\n        draw(){\r\n            c.fillStyle = this.cl;\r\n            c.beginPath();\r\n            c.arc(this.x, this.y, this.r, 0, 2 * Math.PI);\r\n            c.stroke();\r\n            c.fill();\r\n        }\r\n\r\n        update(){\r\n            this.x = noise(increment - this.offset - 20) * (canvas.width - 2 * this.r) + this.r;\r\n            this.y = noise(increment - this.offset) * (canvas.height - 2 * this.r) + this.r;\r\n            this.draw();\r\n        }\r\n    }\r\n\r\n    let particles = new Array();\r\n    \r\n    let int = function(){\r\n        particles = [];\r\n        for(let i = 0; i < 50; i++){\r\n            let r = 10;\r\n            let x = -999;\r\n            let y = -999;\r\n            let cl = 'red';\r\n            particles.push(new ball(x, y, r, cl, i * 0.02));\r\n        }\r\n    }\r\n    int();\r\n\r\n    function isScrolledIntoView(el) {\r\n        var rect = el.getBoundingClientRect();\r\n        var elemTop = rect.top;\r\n        var elemBottom = rect.bottom;\r\n        var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);\r\n        return isVisible;\r\n    } \r\n\r\n    let increment = 0;\r\n\r\n    let animate = function(){\r\n        if(isScrolledIntoView(canvas)){\r\n            c.clearRect(0, 0, canvas.width, canvas.height);\r\n            particles.forEach((particle) =>{\r\n                particle.update();\r\n            });\r\n            increment += 0.01;\r\n        }\r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    animate();\r\n}\r\n} catch {}\r\n\r\ntry{\r\nif(document.querySelector('#canvvaas5') != null){\r\n    let canvas = document.querySelector('#canvvaas5');\r\n    let c = canvas.getContext('2d');\r\n\r\n    canvas.width = 500;\r\n    canvas.height = 300;\r\n\r\n    let ball = class{\r\n        constructor(x, y, r, cl, cl2, offset){\r\n            this.x = x;\r\n            this.y = y;\r\n            this.r = r;\r\n            this.innerColor = cl;\r\n            this.outerColor = cl2;\r\n            this.offset = offset;\r\n            this.previousCoords = {x: this.x, y: this.y};\r\n        }\r\n        \r\n        draw(){\r\n            c.lineCap = 'round';\r\n            c.lineJoin = 'round';\r\n            c.strokeStyle = this.outerColor;\r\n            c.lineWidth = this.r;\r\n            c.beginPath();\r\n            c.moveTo(this.previousCoords.x, this.previousCoords.y);\r\n            c.lineTo(this.x, this.y);\r\n            c.stroke();\r\n            c.fill();\r\n\r\n            c.lineWidth = this.r - 5;\r\n            c.strokeStyle = this.innerColor;\r\n            c.beginPath();\r\n            c.moveTo(this.previousCoords.x, this.previousCoords.y);\r\n            c.lineTo(this.x, this.y);\r\n            c.fill();\r\n            c.stroke();\r\n        }\r\n\r\n        update(){\r\n            if(this.x == undefined){\r\n                this.previousCoords.x = noise(increment - this.offset - 20) * (canvas.width - 2 * this.r) + this.r;\r\n                this.previousCoords.y = noise(increment - this.offset) * (canvas.height - 2 * this.r) + this.r;\r\n            }\r\n            this.x = noise(increment - this.offset - 20) * (canvas.width - 2 * this.r) + this.r;\r\n            this.y = noise(increment - this.offset) * (canvas.height - 2 * this.r) + this.r;\r\n            this.draw();\r\n            this.previousCoords.x = this.x;\r\n            this.previousCoords.y = this.y;\r\n        }\r\n    }\r\n\r\n    let particles = new Array();\r\n    let particles2 = new Array();\r\n\r\n    let colors = [\"#F2EBEC\", \"#C8C1D9\", \"#5D84A6\", \"#485159\", \"#F2D4AE\"];\r\n\r\n    let int = function(){\r\n        particles = [];\r\n        particles2 = [];\r\n        for(let i = 0; i < 30; i++){\r\n            let r = 23;\r\n            let x = undefined;\r\n            let y = undefined;\r\n            let innerColor = colors[Math.floor(Math.random() * colors.length)];\r\n            particles.push(new ball(x, y, r, innerColor, 'red', i * 0.03));\r\n            particles2.push(new ball(x, y, r, innerColor, 'blue', i * 0.03 + 300));\r\n        }\r\n    }\r\n    int();\r\n\r\n    function isScrolledIntoView(el) {\r\n        var rect = el.getBoundingClientRect();\r\n        var elemTop = rect.top;\r\n        var elemBottom = rect.bottom;\r\n        var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);\r\n        return isVisible;\r\n    } \r\n\r\n    let increment = 0;\r\n\r\n    let animate = function(){\r\n        if(isScrolledIntoView(canvas)){\r\n            let imageData = c.getImageData(0, 0, canvas.width, canvas.height);\r\n            let data = imageData.data;\r\n            for(let i = 3; i < data.length; i += 4){\r\n                data[i] = data[i] * 0.7;\r\n                if(data[i] / 255 < 0.1){\r\n                    data[i] = data[i] * 0;\r\n                }\r\n            }\r\n            c.clearRect(0, 0, canvas.width, canvas.height);\r\n            c.putImageData(imageData, 0, 0);\r\n\r\n            particles.forEach((particle) =>{\r\n                particle.update();\r\n            });\r\n            particles2.forEach((particle) =>{\r\n                particle.update();\r\n            });\r\n            increment += 0.01;\r\n        }\r\n        requestAnimationFrame(animate);\r\n    }\r\n\r\n    animate();\r\n}\r\n} catch {}"]}